public void Main()
{
  string begin = "hit";
  string end = "cog";
  SortedSet<string> word = new SortedSet<string>(){"hot","dot","dog","lot","log","cog"};
  Console.WriteLine(LadderLength(begin,end,word));
}

public int LadderLength(string beginWord, string endWord, SortedSet<string> wordList) 
{
        
        if(beginWord == null || endWord == null)
            return 0;
            
        Queue<string> word = new Queue<string>();
        Queue<int> count = new Queue<int>();
        
        word.Enqueue(beginWord);
        count.Enqueue(1);
        
        while(word.Count != 0)
        {
            string currword = word.Dequeue();
            int currcount = count.Dequeue();
            
          	Console.WriteLine(currword + " " + endWord);
            if(currword.Equals(endWord))
                return currcount;
            
            for(int i= 0; i < currword.Length;i++)
            {
                for(char c = 'a' ; c <= 'z'; c++)
                {
                    char[] possible = currword.ToCharArray();
                    possible[i] = c;
                    string newword = new string(possible);
                    if(wordList.Contains(newword))
                    {
                        wordList.Remove(newword);
                        word.Enqueue(newword);
                        count.Enqueue(currcount+1);
                    }
                    
                    
                }
            }
            
            
        }
        
        return 0;
        
    }

//Any classes if required
